import telebot
from telebot import types
from logic import Translator
from datetime import datetime

d = {'af': "–∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π",
     'sq': "–∞–ª–±–∞–Ω—Å–∫–∏–π",
     'am': "–∞–º—Ö–∞—Ä—Å–∫–∏–π",
     'ar': "–∞—Ä–∞–±—Å–∫–∏–π",
     'hy': "–∞—Ä–º—è–Ω—Å–∫–∏–π",
     'az': "–∞–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π",
     'eu': "–±–∞—Å–∫—Å–∫–∏–π",
     'be': "–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π",
     'bn': "–±–µ–Ω–≥–∞–ª—å—Å–∫–∏–π",
     'bs': "–±–æ—Å–Ω–∏–π—Å–∫–∏–π",
     'bg': "–±–æ–ª–≥–∞—Ä—Å–∫–∏–π",
     'ca': "–∫–∞—Ç–∞–ª–∞–Ω—Å–∫–∏–π",
     'ceb': "–∫–µ–±—É–∞–Ω–æ",
     'ny': "—á–∏—á–µ–≤–∞",
     'zh-cn': "–∫–∏—Ç–∞–π—Å–∫–∏–π",
     'zh-tw': "–∫–∏—Ç–∞–π—Å–∫–∏–π —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π",
     'co': "–∫–æ—Ä—Å–∏–∫–∞–Ω—Å–∫–∏–π",
     'hr': "—Ö–æ—Ä–≤–∞—Ç—Å–∫–∏–π",
     'cs': "—á–µ—à—Å–∫–∏–π",
     'da': "–¥–∞—Ç—Å–∫–∏–π",
     'nl': "–≥–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π",
     'en': "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
     'eo': "—ç—Å–ø–µ—Ä–∞–Ω—Ç–æ",
     'et': "—ç—Å—Ç–æ–Ω—Å–∫–∏–π",
     'tl': "—Ñ–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∏–π",
     'fi': "—Ñ–∏–Ω—Å–∫–∏–π",
     'fr': "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
     'fy': "—Ñ—Ä–∏–∑—Å–∫–∏–π",
     'gl': "–≥–∞–ª–∏—Å–∏–π—Å–∫–∏–π",
     'ka': "–≥—Ä—É–∑–∏–Ω—Å–∫–∏–π",
     'de': "–Ω–µ–º–µ—Ü–∫–∏–π",
     'el': "–≥—Ä–µ—á–µ—Å–∫–∏–π",
     'gu': "–≥—É–¥–∂–∞—Ä–∞—Ç—Å–∫–∏–π",
     'ht': "–≥–∞–∏—Ç—è–Ω—Å–∫–∏–π",
     'ha': "—Ö–∞—É—Å–∞",
     'haw': "–≥–∞–≤–∞–π—Å–∫–∏–π",
     'iw': "–∏–≤—Ä–∏—Ç",
     'hi': "—Ö–∏–Ω–¥–∏",
     'hmn': "—Ö–º–æ–Ω–≥",
     'hu': "–≤–µ–Ω–≥–µ—Ä—Å–∫–∏–π",
     'is': "–∏—Å–ª–∞–Ω–¥—Å–∫–∏–π",
     'ig': "–∏–≥–±–æ",
     'id': "–∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π",
     'ga': "–∏—Ä–ª–∞–Ω–¥—Å–∫–∏–π",
     'it': "–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",
     'ja': "—è–ø–æ–Ω—Å–∫–∏–π",
     'jw': "—è–≤–∞–Ω—Å–∫–∏–π",
     'kn': "–∫–∞–Ω–Ω–∞–¥–∞",
     'kk': "–∫–∞–∑–∞—Ö—Å–∫–∏–π",
     'km': "–∫—Ö–º–µ—Ä—Å–∫–∏–π",
     'ko': "–∫–æ—Ä–µ–π—Å–∫–∏–π",
     'ku': "–∫—É—Ä–¥—Å–∫–∏–π",
     'ky': "–∫–∏—Ä–≥–∏–∑—Å–∫–∏–π",
     'lo': "–ª–∞–æ—Å—Å–∫–∏–π",
     'la': "–ª–∞—Ç–∏–Ω—Å–∫–∏–π",
     'lv': "–ª–∞—Ç—ã—à—Å–∫–∏–π",
     'lt': "–ª–∏—Ç–æ–≤—Å–∫–∏–π",
     'lb': "–ª—é–∫—Å–µ–º–±—É—Ä–≥—Å–∫–∏–π",
     'mk': "–º–∞–∫–µ–¥–æ–Ω—Å–∫–∏–π",
     'mg': "–º–∞–ª–∞–≥–∞—Å–∏–π—Å–∫–∏–π",
     'ms': "–º–∞–ª–∞–π—Å–∫–∏–π",
     'ml': "–º–∞–ª–∞—è–ª–∞–º",
     'mt': "–º–∞–ª—å—Ç–∏–π—Å–∫–∏–π",
     'mi': "–º–∞–æ—Ä–∏",
     'mr': "–º–∞—Ä–∞—Ç—Ö–∏",
     'mn': "–º–æ–Ω–≥–æ–ª—å—Å–∫–∏–π",
     'my': "–º—å—è–Ω–º–∞–Ω—Å–∫–∏–π",
     'ne': "–Ω–µ–ø–∞–ª—å—Å–∫–∏–π",
     'no': "–Ω–æ—Ä–≤–µ–∂—Å–∫–∏–π",
     'ps': "–ø—É—à—Ç—É",
     'fa': "–ø–µ—Ä—Å–∏–¥—Å–∫–∏–π",
     'pl': "–ø–æ–ª—å—Å–∫–∏–π",
     'pt': "–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π",
     'pa': "–ø–∞–Ω–¥–∂–∞–±—Å–∫–∏–π",
     'ro': "—Ä—É–º—ã–Ω—Å–∫–∏–π",
     'ru': "—Ä—É—Å—Å–∫–∏–π",
     'sm': "—Å–∞–º–æ–∞–Ω—Å–∫–∏–π",
     'gd': "—à–æ—Ç–ª–∞–Ω–¥—Å–∫–æ-–≥—ç–ª—å—Å–∫–∏–π",
     'sr': "—Å–µ—Ä–±—Å–∫–∏–π",
     'st': "—Å–µ—Å–æ—Ç–æ",
     'sn': "—à–æ–Ω–∞",
     'sd': "—Å–∏–Ω–¥—Ö–∏",
     'si': "—Å–∏–Ω–≥–∞–ª—å—Å–∫–∏–π",
     'sk': "—Å–ª–æ–≤–∞—Ü–∫–∏–π",
     'sl': "—Å–ª–æ–≤–µ–Ω—Å–∫–∏–π",
     'so': "—Å–æ–º–∞–ª–∏–π—Å–∫–∏–π",
     'es': "–∏—Å–ø–∞–Ω—Å–∫–∏–π",
     'su': "—Å—É–Ω–¥–∞–Ω—Å–∫–∏–π",
     'sw': "—Å—É–∞—Ö–∏–ª–∏",
     'sv': "—à–≤–µ–¥—Å–∫–∏–π",
     'tg': "—Ç–∞–¥–∂–∏–∫—Å–∫–∏–π",
     'ta': "—Ç–∞–º–∏–ª—å—Å–∫–∏–π",
     'te': "—Ç–µ–ª—É–≥—É",
     'th': "—Ç–∞–π—Å–∫–∏–π",
     'tr': "—Ç—É—Ä–µ—Ü–∫–∏–π",
     'uk': "—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π",
     'ur': "—É—Ä–¥—É",
     'uz': "—É–∑–±–µ–∫—Å–∫–∏–π",
     'vi': "–≤—å–µ—Ç–Ω–∞–º—Å–∫–∏–π",
     'cy': "–≤–∞–ª–ª–∏–π—Å–∫–∏–π",
     'xh': "—Ö–æ—Å–∞",
     'yi': "–∏–¥–∏—à",
     'yo': "–π–æ—Ä—É–±–∞",
     'zu': "–∑—É–ª—É",
     'fil': "—Ñ–∏–ª–∏–ø–ø–∏–Ω—Å–∫–∏–π",
     'he': "–∏–≤—Ä–∏—Ç"}
tg_token = open('token.txt').readline() # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
codes = list(d.keys())
langs = list(d.values())
bot = telebot.TeleBot(tg_token)
a = []
tr = Translator()


@bot.message_handler(commands=['start'])  # –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
def main(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    # item1 = types.InlineKeyboardButton('ENGLISH', callback_data='question1')
    # item2 = types.InlineKeyboardButton('italian', callback_data='question2')
    item1 = types.InlineKeyboardButton('–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å?', callback_data='choose')
    item2 = types.InlineKeyboardButton('–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º', callback_data='a')
    markup.add(item1, row_width=1)
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, —ç—Ç–æ –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫.\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º',

                     reply_markup=markup)


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, '<b>help</b>', parse_mode='html')


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.message:
        # if call.data == 'auto' and tr.autodetect:
        #   bot.send_message(call.message.chat.id, '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.')
        #  tr.change_autodetect(0)
        # if call.data == 'auto' and not tr.autodetect:
        #   bot.send_message(call.message.chat.id, '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.')
        #  tr.change_autodetect(1)
        if call.data == 'choose':
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton('–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data='ru')
            item2 = types.InlineKeyboardButton('–ê–Ω–≥–ª–∏–π—Å–∫–∏–π üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø', callback_data='en')
            item3 = types.InlineKeyboardButton('–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π üá´üá∑', callback_data='fr')
            item4 = types.InlineKeyboardButton('–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π üáÆüáπ', callback_data='it')
            item5 = types.InlineKeyboardButton('–ù–µ–º–µ—Ü–∫–∏–π üá©üá™', callback_data='de')
            item6 = types.InlineKeyboardButton('–ò—Å–ø–∞–Ω—Å–∫–∏–π üá™üá∏', callback_data='es')
            item7 = types.InlineKeyboardButton('–î—Ä—É–≥–æ–π üè≥', callback_data='other')
            markup.add(item1, item2, item3, item4, item5, item6, item7, row_width=3)
            bot.send_message(call.message.chat.id,
                             f'–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:',
                             reply_markup=markup)
        if call.data in codes:
            tr.change_target_lang(call.data)
            bot.send_message(call.message.chat.id,
                             f'–Ø–∑—ã–∫ —Å–º–µ–Ω–µ–Ω –Ω–∞ {langs[codes.index(call.data)]}')
        if call.data == 'other':
            bot.send_message(call.message.chat.id,
                             f'–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫, –Ω–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ —Å–ø–∏—Å–∫–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /c –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)')


@bot.message_handler(func=lambda call: True)
def translate(message):
    if '/c' in message.text or '/—Å' in message.text:
        if len(message.text) > 2:
            c = message.text.lower().split()[1]
            if c in langs:
                tr.change_target_lang(codes[langs.index(c)])
                bot.send_message(message.chat.id, f'–Ø–∑—ã–∫ —Å–º–µ–Ω–µ–Ω –Ω–∞ {c}', parse_mode='html')
            else:
                bot.send_message(message.chat.id, f'–ú—ã –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º —Ç–∞–∫–æ–≥–æ —è–∑—ã–∫–∞(', parse_mode='html')
        else:
            bot.send_message(message.chat.id, f'–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ—Å–ª–µ /c', parse_mode='html')
    else:
        e = tr.translate(message.text)
        a.append(f'{message.chat.id}, [{datetime.now()}]: {message.text} => {e}\n')
        bot.send_message(message.chat.id, f'<b>{e}</b>', parse_mode='html')
        print(a)
        f = open('query_history.txt', 'a')
        f.write(f'{message.chat.id}, [{datetime.now()}]: {message.text} => {e}\n')
        f.close()


bot.polling(none_stop=True)
